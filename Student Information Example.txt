CREATE TABLE COURSE_MASTER(COURSE_ID INTEGER, COURSE_NAME CHAR(50))

CREATE TABLE STUDENT_INFO(STUDENT_ID INTEGER PRIMARY KEY, NAME CHAR(50), DOB DATE, SEM INTEGER, COURSE_ID INTEGER, FOREIGN KEY(COURSE_ID) REFERENCES COURSE_MASTER ON DELETE CASCADE)

CREATE TABLE STUDENT_RESULT(STUDENT_ID INTEGER,M1 INTEGER, M2 INTEGER, M3 INTEGER, PER FLOAT, GRADE CHAR(1), FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT_INFO ON DELETE CASCADE)

***********DISPLAY BY ID*********
CREATE OR REPLACE PROCEDURE DISPLAY_BY_ID(V_ID STUDENT_INFO.STUDENT_ID%TYPE, V_NAME OUT STUDENT_INFO.NAME%TYPE, V_DOB OUT STUDENT_INFO.DOB%TYPE)
AS
BEGIN
    SELECT NAME,DOB INTO V_NAME, V_DOB FROM STUDENT_INFO WHERE STUDENT_ID = V_ID;
END DISPLAY_BY_ID;

DECLARE
    V_NAME CHAR(50);
    V_DOB DATE;
BEGIN 
    DISPLAY_BY_ID(1,V_NAME,V_DOB);
    DBMS_OUTPUT.PUT_LINE(V_NAME || ' ' || V_DOB);
END;

*********TRIGGER FOR STUDENT WHEN INSERT VALUES INTO STUDENT_RESULT TABLE AND IT WILL CALCULATE PER AND GRADE*********
CREATE OR REPLACE TRIGGER INSERT_STUDENT_MARKS 
BEFORE INSERT
ON STUDENT_RESULT
FOR EACH ROW
BEGIN 
   :NEW.PER :=(:NEW.M1 + :NEW.M2 + :NEW.M3)/3; 
   IF :NEW.PER >= 70 THEN
      :NEW.GRADE := 'DIST';
   ELSIF :NEW.PER >= 60 AND :NEW.PER < 70 THEN
      :NEW.GRADE := 'FIRST'; 
   ELSIF :NEW.PER >= 50 AND :NEW.PER < 60 THEN
      :NEW.GRADE := 'SECOND';
   ELSIF :NEW.PER >=40 AND :NEW.PER <50 THEN
      :NEW.GRADE := 'THIRD';
   ELSE 
      :NEW.GRADE := 'FAIL';
   END IF;
END;

INSERT INTO STUDENT_RESULT VALUES(1,99,95,96,'','')
SELECT * FROM STUDENT_RESULT

*********DISPLAY STUDENT NAME BY COURSE_ID USING PROCEDURE AND CURSOR*********
CREATE OR REPLACE PROCEDURE DISPLAY_BY_COURSE_ID(V_COURSE_ID INTEGER)
IS
  CURSOR CUR_STUDENT IS SELECT * FROM STUDENT_INFO WHERE COURSE_ID = V_COURSE_ID;
  V_STUDENT_INFO STUDENT_INFO%ROWTYPE;
BEGIN
  OPEN CUR_STUDENT;
  LOOP
  FETCH CUR_STUDENT INTO V_STUDENT_INFO;
  EXIT WHEN CUR_STUDENT%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE(V_STUDENT_INFO.NAME);
  END LOOP;
  CLOSE CUR_STUDENT;
END;
  
BEGIN
  DISPLAY_BY_COURSE_ID(2);
END;


*****************DISPLAY STUDENT BY SEM USING PROCEDURE AND CURSOR***************
CREATE OR REPLACE PROCEDURE DISPLAY_BY_SEM(V_SEM INTEGER)
IS
 CURSOR CUR_STUDENT IS SELECT * FROM STUDENT_INFO WHERE SEM = V_SEM;
 V_STUDENT STUDENT_INFO%ROWTYPE;
BEGIN 
  OPEN CUR_STUDENT;
  LOOP
  FETCH CUR_STUDENT INTO V_STUDENT;
  EXIT WHEN CUR_STUDENT%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE(V_STUDENT.NAME);
  END LOOP;
  CLOSE CUR_STUDENT;
END;

BEGIN
  DISPLAY_BY_SEM(6);
END;

******************DISPLAY STUDENT BY SEM AND GRADE USING CURSOR AND PROCEDURE************
SELECT S.* FROM STUDENT_INFO S, STUDENT_RESULT R WHERE R.STUDENT_ID = S.STUDENT_ID AND SEM = 6 AND GRADE = 'DIST'

CREATE OR REPLACE PROCEDURE DISPLAY_BY_SEM_GRADE(V_SEM INTEGER, V_GRADE CHAR)
IS
  CURSOR CUR_STUDENT IS SELECT S.* FROM STUDENT_INFO S, STUDENT_RESULT R WHERE R.STUDENT_ID = S.STUDENT_ID AND SEM = V_SEM AND GRADE = V_GRADE;
  V_STUDENT STUDENT_INFO%ROWTYPE;
BEGIN
  OPEN CUR_STUDENT;
  LOOP
  FETCH CUR_STUDENT INTO V_STUDENT;
  EXIT WHEN CUR_STUDENT%NOTFOUND;
  DBMS_OUTPUT.PUT_LINE(V_STUDENT.NAME);
  END LOOP;
  CLOSE CUR_STUDENT;
END;

BEGIN
  DISPLAY_BY_SEM_GRADE(6,'DIST');
END;

*****************COUNT STUDENT AS SEM WISE****************
CREATE OR REPLACE PROCEDURE COUNT_BY_SEM(V_SEM INTEGER, V_COUNT OUT INTEGER)
IS 
BEGIN
   SELECT COUNT(*) INTO V_COUNT FROM STUDENT_INFO WHERE SEM = V_SEM;
   
END;

DECLARE 
    V_COUNT INTEGER;
BEGIN
   COUNT_BY_SEM(5,V_COUNT);
   DBMS_OUTPUT.PUT_LINE(V_COUNT);
END;

*****************DISPLAY TOTAL STUDENT BY GRADE************
CREATE OR REPLACE PROCEDURE COUNT_BY_GRADE(V_GRADE CHAR, V_COUNT OUT INTEGER)
IS 
BEGIN
   SELECT COUNT(*) INTO V_COUNT FROM STUDENT_RESULT WHERE GRADE = V_GRADE;
END;

DECLARE 
    V_COUNT INTEGER;
BEGIN
   COUNT_BY_GRADE('FAIL',V_COUNT);
   DBMS_OUTPUT.PUT_LINE(V_COUNT);
END;

******COUNT BY SEM USING FUNCTION(PARAMETER)*****
CREATE OR REPLACE FUNCTION COUNT_BY_SEM_FN(V_SEM IN INTEGER, V_COUNT OUT INTEGER)
RETURN INTEGER
AS
V_COUNT_2 INTEGER;
BEGIN
    SELECT COUNT(*) INTO V_COUNT FROM STUDENT_INFO WHERE SEM = V_SEM;
    RETURN V_COUNT;
END;

DECLARE
     V_COUNT_TOTAL INTEGER;
     V_SAVE INTEGER;
BEGIN
     V_SAVE := COUNT_BY_SEM_FN(6,V_COUNT_TOTAL);
     DBMS_OUTPUT.PUT_LINE(V_COUNT_TOTAL);
END;
